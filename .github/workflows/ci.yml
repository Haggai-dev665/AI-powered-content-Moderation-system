name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Initialize database
      run: |
        python database/migrations/001_initial_schema.py
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

  build-and-test-services:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Initialize database
      run: |
        python database/migrations/001_initial_schema.py
    
    - name: Start services in background
      run: |
        # Start text moderation service
        cd text-moderation-service && python main.py &
        TEXT_PID=$!
        
        # Start image moderation service  
        cd ../image-moderation-service && python main.py &
        IMAGE_PID=$!
        
        # Start API gateway
        cd ../api-gateway && python main.py &
        GATEWAY_PID=$!
        
        # Wait for services to start
        sleep 10
        
        # Test health endpoints
        curl -f http://localhost:8001/health
        curl -f http://localhost:8002/health  
        curl -f http://localhost:8000/health
        
        # Stop services
        kill $TEXT_PID $IMAGE_PID $GATEWAY_PID
      timeout-minutes: 5

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t content-moderation:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        # Run container in background
        docker run -d --name test-container -p 8000:8000 content-moderation:${{ github.sha }}
        
        # Wait for container to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Stop container
        docker stop test-container
        docker rm test-container
